module World.Map exposing (..)

import Config
import Dict exposing (Dict)
import Game exposing (Game)
import Game.Build


get : ( Int, Int ) -> Game
get pos =
    Game.Build.constant
        (dict
            |> Dict.get pos
            |> Maybe.withDefault []
        )
        (getDoors pos)


getDoors : ( Int, Int ) -> List ( ( Int, Int ), { room : ( Int, Int ) } )
getDoors ( x, y ) =
    [ ( ( x - 1, y ), ( -1, 2 ) )
    , ( ( x, y - 1 ), ( 2, -1 ) )
    , ( ( x + 1, y ), ( Config.roomSize, 2 ) )
    , ( ( x, y + 1 ), ( 2, Config.roomSize ) )
    ]
        |> List.filterMap
            (\( room, pos ) ->
                if dict |> Dict.member room then
                    Just ( pos, { room = room } )

                else
                    Nothing
            )


dict : Dict ( Int, Int ) (List String)
dict =
    [ ( ( 0, 0 )
      , [ "ðŸ§±ðŸ“¦â¬œðŸ“¦ðŸ§±"
        , "ðŸ§±â¬œðŸ“¦â¬œðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( 0, -1 )
      , [ "ðŸ§±ðŸ“¦â¬œðŸ“¦ðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±ðŸ“¦ðŸ“¦ðŸ“¦ðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( 0, -2 )
      , [ "ðŸ§±â¬œðŸ“¦â¬œðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±ðŸ“¦â¬œðŸ“¦ðŸ§±"
        , "ðŸ§±â¬œðŸ“¦â¬œðŸ§±"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( 0, -3 )
      , [ "ðŸ§±ðŸ“¦ðŸ“¦ðŸ“¦ðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œðŸ§¨â¬œðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( 0, -4 )
      , [ "ðŸ§±â¬œðŸ“¦â¬œðŸ§±"
        , "ðŸ§±ðŸ“¦ðŸ“¦ðŸ“¦ðŸ§±"
        , "ðŸ§±â¬œðŸ§¨â¬œðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( 0, -5 )
      , [ "ðŸ§±ðŸ“¦ðŸ“¦ðŸ“¦ðŸ§±"
        , "ðŸ§±ðŸ“¦ðŸ§¨ðŸ“¦ðŸ§±"
        , "ðŸ§±â¬œðŸ§¨â¬œðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( 0, -6 )
      , [ "ðŸ§±ðŸ§±ðŸ§±ðŸ§±ðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œðŸ§¨â¬œðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( 0, -7 )
      , [ "ðŸ§±ðŸ§±ðŸ§±ðŸ§±ðŸ§±"
        , "ðŸ§±ðŸ“¦ðŸ“¦ðŸ“¦ðŸ§±"
        , "ðŸ§±ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( 0, -8 )
      , [ "ðŸ§±ðŸ§±ðŸ§±ðŸ§±ðŸ§±"
        , "ðŸ§±ðŸ§¨ðŸ“¦ðŸ§¨ðŸ§±"
        , "ðŸ§±ðŸ“¦ðŸ§¨ðŸ“¦ðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( 0, -9 )
      , [ "ðŸ§±â¬œðŸ“¦â¬œðŸ§±"
        , "ðŸ§¨â¬œâ¬œâ¬œðŸ§¨"
        , "ðŸ§±ðŸ“¦ðŸ“¦ðŸ“¦ðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( 0, -10 )
      , [ "ðŸ§±â¬œðŸ“¦â¬œðŸ§±"
        , "ðŸ§±ðŸ“¦â¬œðŸ“¦ðŸ§±"
        , "ðŸ§¨â¬œðŸ“¦â¬œðŸ§¨"
        , "ðŸ§¨ðŸ“¦ðŸ“¦ðŸ“¦ðŸ§¨"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( 0, -11 )
      , [ "ðŸ§±â¬œðŸ§±â¬œðŸ§±"
        , "ðŸ§¨ðŸ§±ðŸ“¦ðŸ§±ðŸ§¨"
        , "ðŸ§¨ðŸ“¦ðŸ§¨ðŸ“¦ðŸ§¨"
        , "ðŸ§¨â¬œðŸ§¨â¬œðŸ§¨"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( 0, -12 )
      , [ "ðŸ§±ðŸ§±ðŸ§±ðŸ§±ðŸ§±"
        , "ðŸ§±â¬œðŸ§¨â¬œðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( 0, -13 )
      , [ "ðŸ§±ðŸ§±ðŸ§±ðŸ§±ðŸ§±"
        , "ðŸ§±ðŸ§±ðŸ§±ðŸ§±ðŸ§±"
        , "ðŸ§±â¬œðŸ’Žâ¬œðŸ§±"
        , "ðŸ§±â¬œâ¬œâ¬œðŸ§±"
        , "ðŸ§±â¬œðŸ˜Šâ¬œðŸ§±"
        ]
      )
    , ( ( -1, -12 )
      , [ "ðŸ§±ðŸ§±ðŸ§±ðŸ§±ðŸ§±"
        , "â¬œâ¬œâ¬œâ¬œâ¬œ"
        , "â¬œâ¬œâ¬œâ¬œâ¬œ"
        , "â¬œâ¬œâ¬œâ¬œâ¬œ"
        , "ðŸ§±ðŸ§±ðŸ§±ðŸ§±ðŸ§±"
        ]
      )
    ]
        |> Dict.fromList
